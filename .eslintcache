[{"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\reportWebVitals.js":"1","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\navbar.js":"2","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\Homepage.js":"3","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\BlogCard.js":"4","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\HomePage.js":"5","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\DetailPage.js":"6","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\CardList.js":"7","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\Navbar.js":"8","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\CardDetail.js":"9","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\router\\Router.js":"10","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\index.js":"11","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\ProfilePage.js":"12","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\PostPage.js":"13","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\UpdatePage.js":"14","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\App.js":"15","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\context\\AuthContext.js":"16","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\helper\\FetchData.js":"17","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\Register.js":"18","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\Login.js":"19","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\MenuComponent.js":"20","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\Pagination.js":"21"},{"size":362,"mtime":1611502682000,"results":"22","hashOfConfig":"23"},{"size":4546,"mtime":1611581340254,"results":"24","hashOfConfig":"23"},{"size":966,"mtime":1611576004862,"results":"25","hashOfConfig":"23"},{"size":4078,"mtime":1611995383000,"results":"26","hashOfConfig":"23"},{"size":856,"mtime":1612090716896,"results":"27","hashOfConfig":"23"},{"size":1324,"mtime":1612040455497,"results":"28","hashOfConfig":"23"},{"size":829,"mtime":1612040974047,"results":"29","hashOfConfig":"23"},{"size":6136,"mtime":1612092674208,"results":"30","hashOfConfig":"23"},{"size":6970,"mtime":1612045604573,"results":"31","hashOfConfig":"23"},{"size":1818,"mtime":1612045948363,"results":"32","hashOfConfig":"23"},{"size":500,"mtime":1611841022000,"results":"33","hashOfConfig":"23"},{"size":8555,"mtime":1612045870893,"results":"34","hashOfConfig":"23"},{"size":7862,"mtime":1611998385000,"results":"35","hashOfConfig":"23"},{"size":8553,"mtime":1612045953950,"results":"36","hashOfConfig":"23"},{"size":227,"mtime":1611840870000,"results":"37","hashOfConfig":"23"},{"size":859,"mtime":1612090707909,"results":"38","hashOfConfig":"23"},{"size":1622,"mtime":1612040149275,"results":"39","hashOfConfig":"23"},{"size":6325,"mtime":1611998243000,"results":"40","hashOfConfig":"23"},{"size":5868,"mtime":1612045694437,"results":"41","hashOfConfig":"23"},{"size":5461,"mtime":1612040454682,"results":"42","hashOfConfig":"23"},{"size":730,"mtime":1612043570385,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"16j22uh",{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"57"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"57"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"57"},"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\reportWebVitals.js",[],["93","94"],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\navbar.js",["95","96"],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\Homepage.js",["97","98"],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\BlogCard.js",[],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\HomePage.js",["99","100","101","102"],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\DetailPage.js",[],["103","104"],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\CardList.js",[],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\Navbar.js",["105","106","107","108"],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\CardDetail.js",[],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\router\\Router.js",[],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\index.js",[],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\ProfilePage.js",["109"],"import React, { useState, useEffect } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport LocalMallIcon from \"@material-ui/icons/LocalMall\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { putDataWithToken } from \"../helper/FetchData\";\r\nimport axios from \"axios\";\r\n\r\n//STYLE\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    width: \"40%\",\r\n    \"& label.Mui-focused\": {\r\n      color: \"green\",\r\n    },\r\n    \"& .MuiInput-underline:after\": {\r\n      borderBottomColor: \"green\",\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        borderColor: \"#cfccdf\",\r\n      },\r\n      \"&:hover fieldset\": {\r\n        borderColor: \"#e9967a\",\r\n      },\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: \"green\",\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n  form: {\r\n    marginTop: \"3rem\",\r\n    alignItems: \"center\",\r\n    paddingLeft: \"20%\",\r\n    paddingRight: \"5%\",\r\n  },\r\n  form2: {\r\n    marginTop: \"3rem\",\r\n    alignItems: \"center\",\r\n  },\r\n  margin: {\r\n    margin: 2,\r\n    marginTop: 13,\r\n  },\r\n  address: {\r\n    marginTop: 13,\r\n    margin: 2,\r\n    width: \"80.5%\",\r\n  },\r\n  bio: {\r\n    margin: 2,\r\n    marginTop: 13,\r\n  },\r\n  button: {\r\n    marginTop: 13,\r\n    width: \"80.7%\",\r\n  },\r\n}));\r\n\r\n// FUNCTION\r\n\r\nconst ProfilePage = () => {\r\n  const [data, setData] = useState();\r\n  const classes = useStyles();\r\n  const matches = useMediaQuery(\"(min-width:750px)\");\r\n\r\n  const history = useHistory();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    first_name: Yup.string().max(200, \"Title is too long\"),\r\n    last_name: Yup.string().max(200, \"Title is too long\"),\r\n    address: Yup.string().max(200, \"Title is too long\"),\r\n    country: Yup.string().max(200, \"Title is too long\"),\r\n    phone: Yup.string().max(200, \"Title is too long\"),\r\n    bio: Yup.string().max(200, \"Title is too long\"),\r\n  });\r\n\r\n  const initialValues = {\r\n    first_name: \"\",\r\n    last_name: \"\",\r\n    country: \"\",\r\n    phone: \"\",\r\n    bio: \"\",\r\n    address: \"\",\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    putDataWithToken(\r\n      \"https://blog-backend-ysf.herokuapp.com/user/profile/\",\r\n      values\r\n    )\r\n      .then((data) => {\r\n        history.push(\"/profile\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema,\r\n    onSubmit,\r\n  });\r\n\r\n  const fetchData = async () => {\r\n    const Token = localStorage.getItem(\"Token\");\r\n    const res = await axios.get(\r\n      `https://blog-backend-ysf.herokuapp.com/user/profile/`,\r\n      {\r\n        headers: {\r\n          Authorization: `Token ${Token}`,\r\n        },\r\n      }\r\n    );\r\n    formik.values.first_name = res?.data?.first_name;\r\n    formik.values.last_name = res?.data?.last_name;\r\n    formik.values.address = res?.data?.address;\r\n    formik.values.bio = res?.data?.bio;\r\n    formik.values.phone = res?.data?.phone;\r\n    formik.values.country = res?.data?.country;\r\n    setData(res?.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <Grid item xs={12} component={Paper} elevation={6} square>\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LocalMallIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Profile\r\n          </Typography>\r\n          <form\r\n            className={matches ? classes.form : classes.form2}\r\n            onSubmit={formik.handleSubmit}\r\n          >\r\n            <CssTextField\r\n              defaultValue={data?.phone}\r\n              className={classes.margin}\r\n              style={{ width: matches ? \"40%\" : \"100%\" }}\r\n              variant=\"outlined\"\r\n              id=\"first_name\"\r\n              name=\"first_name\"\r\n              label=\"First Name\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.fist_name}\r\n              onBlur={formik.handleBlur}\r\n              {...formik.getFieldProps(\"first_name\")}\r\n              error={formik.touched.first_name && formik.errors.first_name}\r\n              helperText={formik.touched.first_name && formik.errors.first_name}\r\n            />\r\n            <CssTextField\r\n              className={classes.margin}\r\n              style={{ width: matches ? \"40%\" : \"100%\" }}\r\n              id=\"last_name\"\r\n              name=\"last_name\"\r\n              label=\"Last Name\"\r\n              variant=\"outlined\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.last_name}\r\n              onBlur={formik.handleBlur}\r\n              {...formik.getFieldProps(\"last_name\")}\r\n              error={formik.touched.last_name && formik.errors.last_name}\r\n              helperText={formik.touched.last_name && formik.errors.last_name}\r\n            />\r\n\r\n            <CssTextField\r\n              className={classes.margin}\r\n              style={{ width: matches ? \"40%\" : \"100%\" }}\r\n              variant=\"outlined\"\r\n              id=\"country\"\r\n              name=\"country\"\r\n              label=\"Country\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.country}\r\n              onBlur={formik.handleBlur}\r\n              {...formik.getFieldProps(\"country\")}\r\n              error={formik.touched.country && formik.errors.country}\r\n              helperText={formik.touched.country && formik.errors.country}\r\n            />\r\n\r\n            <CssTextField\r\n              className={classes.margin}\r\n              style={{ width: matches ? \"40%\" : \"100%\" }}\r\n              variant=\"outlined\"\r\n              id=\"phone\"\r\n              name=\"phone\"\r\n              label=\"Phone\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.phone}\r\n              onBlur={formik.handleBlur}\r\n              {...formik.getFieldProps(\"phone\")}\r\n              error={formik.touched.phone && formik.errors.phone}\r\n              helperText={formik.touched.phone && formik.errors.phone}\r\n            />\r\n            <CssTextField\r\n              className={classes.address}\r\n              style={{ width: matches ? \"80.7%\" : \"100%\" }}\r\n              variant=\"outlined\"\r\n              id=\"adress\"\r\n              name=\"address\"\r\n              label=\"Address\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.address}\r\n              onBlur={formik.handleBlur}\r\n              {...formik.getFieldProps(\"address\")}\r\n              error={formik.touched.address && formik.errors.address}\r\n              helperText={formik.touched.address && formik.errors.address}\r\n            />\r\n\r\n            <CssTextField\r\n              className={classes.bio}\r\n              style={{ width: matches ? \"80.7%\" : \"100%\" }}\r\n              variant=\"outlined\"\r\n              id=\"bio\"\r\n              name=\"bio\"\r\n              label=\"Biografy\"\r\n              multiline\r\n              rows={8}\r\n              onChange={formik.handleChange}\r\n              value={formik.values.bio}\r\n              onBlur={formik.handleBlur}\r\n              {...formik.getFieldProps(\"bio\")}\r\n              error={formik.touched.bio && formik.errors.bio}\r\n              helperText={formik.touched.bio && formik.errors.bio}\r\n            />\r\n\r\n            <Button\r\n              color=\"primary\"\r\n              style={{\r\n                width: matches ? \"80.7%\" : \"100%\",\r\n                marginTop: matches ? null : 30,\r\n              }}\r\n              variant=\"contained\"\r\n              fullWidth\r\n              type=\"submit\"\r\n              className={classes.button}\r\n            >\r\n              Update\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default ProfilePage;\r\n","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\PostPage.js",["110"],"import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport LocalMallIcon from \"@material-ui/icons/LocalMall\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport CKEditor from \"ckeditor4-react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useHistory } from \"react-router-dom\";\nimport { postDataWithToken } from \"../helper/FetchData\";\n\n// STYLE\n\nconst CssTextField = withStyles({\n  root: {\n    width: \"40%\",\n    \"& label.Mui-focused\": {\n      color: \"green\",\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"green\",\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"#cfccdf\",\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#e9967a\",\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"green\",\n      },\n    },\n  },\n})(TextField);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    overflow: \"hidden\",\n  },\n\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary.main,\n  },\n  form: {\n    marginTop: \"3rem\",\n    alignItems: \"center\",\n    width: \"80%\",\n    paddingLeft: \"10%\",\n  },\n  form2: {\n    marginTop: \"3rem\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n  margin: {\n    margin: 2,\n    marginTop: 13,\n  },\n  address: {\n    marginTop: 13,\n    margin: 2,\n    width: \"80.5%\",\n  },\n  bio: {\n    margin: 2,\n    marginTop: 13,\n  },\n  button: {\n    marginTop: 13,\n    width: \"80.7%\",\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 500,\n    display: \"block\",\n    marginLeft: -0.1,\n    width: \"40%\",\n    \"& label.Mui-focused\": {\n      color: \"green\",\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"green\",\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"#cfccdf\",\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#e9967a\",\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"green\",\n      },\n    },\n  },\n}));\n\n//FUNCTION\n\nconst PostPage = () => {\n  const classes = useStyles();\n  const matches = useMediaQuery(\"(min-width:750px)\");\n\n  const history = useHistory();\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string()\n      .required(\"you must write a title\")\n      .max(100, \"Title is too long\"),\n    content: Yup.string().required(\"You must write something\"),\n    image: Yup.string(),\n    status: Yup.string(),\n  });\n\n  const initialValues = {\n    title: \"\",\n    content: \"\",\n    image: \"\",\n    status: \"\",\n  };\n\n  const onSubmit = (values) => {\n    postDataWithToken(\"https://blog-backend-ysf.herokuapp.com/create/\", values)\n      .then((data) => {\n        history.push(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit,\n  });\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <Grid item xs={12} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LocalMallIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Create New Post\n          </Typography>\n          <form\n            className={matches ? classes.form : classes.form2}\n            onSubmit={formik.handleSubmit}\n          >\n            <CssTextField\n              className={classes.margin}\n              style={{ width: matches ? \"80.5%\" : \"100%\" }}\n              variant=\"outlined\"\n              id=\"title\"\n              name=\"title\"\n              label=\"Title\"\n              onChange={formik.handleChange}\n              value={formik.values.title}\n              onBlur={formik.handleBlur}\n              {...formik.getFieldProps(\"title\")}\n              error={formik.touched.title && formik.errors.title}\n              helperText={formik.touched.title && formik.errors.title}\n            />\n            <CssTextField\n              className={classes.margin}\n              style={{ width: matches ? \"80.5%\" : \"100%\" }}\n              id=\"image\"\n              name=\"image\"\n              label=\"Image URL\"\n              variant=\"outlined\"\n              onChange={formik.handleChange}\n              value={formik.values.image}\n              onBlur={formik.handleBlur}\n              {...formik.getFieldProps(\"image\")}\n              error={formik.touched.image && formik.errors.image}\n              helperText={formik.touched.image && formik.errors.image}\n            />\n            {/* {\n                matches\n                ?\n                <div className=\"App\" style={{  marginTop:20,width: matches ? \"80.5%\" : \"100%\" }}>\n            \n                <CKEditor\n                    id=\"content\"\n                    name = 'content'\n                    editor={ ClassicEditor }\n                    onChange={(event) => formik.handleChange(event)}\n                    value = {formik.values.content}\n                    onBlur={(event) => formik.handleBlur(event)}\n                    {...formik.getFieldProps('content')}\n                    error={formik.touched.content && formik.errors.content }\n                   type=\"classic\"\n                  //  data =  {formik.values.content}\n                   readOnly={false}\n                />\n            </div>\n                : */}\n            <CssTextField\n              className={classes.margin}\n              style={{ width: matches ? \"80.5%\" : \"100%\" }}\n              variant=\"outlined\"\n              multiline\n              rows={8}\n              id=\"content\"\n              name=\"content\"\n              label=\"Content\"\n              onChange={formik.handleChange}\n              value={formik.values.content}\n              onBlur={formik.handleBlur}\n              {...formik.getFieldProps(\"content\")}\n              error={formik.touched.content && formik.errors.content}\n              helperText={formik.touched.content && formik.errors.content}\n            />\n\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n              <InputLabel htmlFor=\"outlined-age-native-simple\">\n                Status\n              </InputLabel>\n              <Select\n                native\n                value={formik.values.status}\n                onChange={formik.handleChange}\n                label=\"Status\"\n                name=\"status\"\n                inputProps={{\n                  name: \"status\",\n                  id: \"outlined-age-native-simple\",\n                }}\n              >\n                <option aria-label=\"None\" value=\"\" />\n                <option value={\"d\"} label=\"draft\" />\n                <option value={\"p\"} label=\"published\" />\n              </Select>\n            </FormControl>\n            <Button\n              color=\"primary\"\n              style={{\n                width: matches ? \"80.7%\" : \"100%\",\n                marginTop: matches ? null : 30,\n              }}\n              variant=\"contained\"\n              fullWidth\n              type=\"submit\"\n              className={classes.button}\n            >\n              Create\n            </Button>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\nexport default PostPage;\n","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\UpdatePage.js",["111","112"],"import React, { useEffect, useState } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport LocalMallIcon from \"@material-ui/icons/LocalMall\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useHistory } from \"react-router-dom\";\nimport { putDataWithToken } from \"../helper/FetchData\";\nimport { toast } from \"react-toastify\";\n\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\n\n//STYLE\n\nconst CssTextField = withStyles({\n  root: {\n    width: \"40%\",\n    \"& label.Mui-focused\": {\n      color: \"green\",\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"green\",\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"#cfccdf\",\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#e9967a\",\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"green\",\n      },\n    },\n  },\n})(TextField);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    overflow: \"hidden\",\n  },\n\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary.main,\n  },\n  form: {\n    marginTop: \"3rem\",\n    alignItems: \"center\",\n    width: \"80%\",\n    paddingLeft: \"10%\",\n  },\n  form2: {\n    marginTop: \"3rem\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n  margin: {\n    margin: 2,\n    marginTop: 13,\n  },\n  address: {\n    marginTop: 13,\n    margin: 2,\n    width: \"80.5%\",\n  },\n  bio: {\n    margin: 2,\n    marginTop: 13,\n  },\n  button: {\n    marginTop: 13,\n    width: \"80.7%\",\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 500,\n    display: \"block\",\n    marginLeft: -0.1,\n    width: \"40%\",\n    \"& label.Mui-focused\": {\n      color: \"green\",\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"green\",\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"#cfccdf\",\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#e9967a\",\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"green\",\n      },\n    },\n  },\n}));\n\n//FUNCTION\n\nconst UpdatePage = () => {\n  const [data, setData] = useState();\n  const classes = useStyles();\n  const matches = useMediaQuery(\"(min-width:750px)\");\n\n  const history = useHistory();\n  const { slug } = useParams();\n\n  const fetchData = async () => {\n    const res = await axios.get(\n      `https://blog-backend-ysf.herokuapp.com/${slug}/detail`\n    );\n    formik.values.title = res?.data?.title;\n    formik.values.image = res?.data?.image;\n    formik.values.content = res?.data?.content;\n    formik.values.status = res?.data?.status;\n    setData(res?.data);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string()\n      .required(\"you must write a title\")\n      .max(100, \"Title is too long\"),\n    content: Yup.string().required(\"You must write something\"),\n    image: Yup.string(),\n    status: Yup.string(),\n  });\n\n  const initialValues = {\n    title: \"\",\n    content: \"\",\n    image: \"\",\n    status: \"\",\n  };\n\n  const onSubmit = (values) => {\n    const response = putDataWithToken(\n      `https://blog-backend-ysf.herokuapp.com/${slug}/update/`,\n      values\n    )\n      .then((data) => {\n        history.push(`/${slug}/detail/`);\n      })\n      .catch((err) => {\n        toast.error(err.message || \" an error occured\");\n      });\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit,\n  });\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <Grid item xs={12} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LocalMallIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Update Post\n          </Typography>\n          <form\n            className={matches ? classes.form : classes.form2}\n            onSubmit={formik.handleSubmit}\n          >\n            <CssTextField\n              defaultValue={data?.title}\n              className={classes.margin}\n              style={{ width: matches ? \"80.5%\" : \"100%\" }}\n              variant=\"outlined\"\n              id=\"title\"\n              name=\"title\"\n              label=\"Title\"\n              onChange={formik.handleChange}\n              value={formik.values.title}\n              onBlur={formik.handleBlur}\n              {...formik.getFieldProps(\"title\")}\n              error={formik.touched.title && formik.errors.title}\n              helperText={formik.touched.title && formik.errors.title}\n            />\n            <CssTextField\n              className={classes.margin}\n              style={{ width: matches ? \"80.5%\" : \"100%\" }}\n              id=\"image\"\n              name=\"image\"\n              label=\"Image URL\"\n              variant=\"outlined\"\n              onChange={formik.handleChange}\n              value={formik.values.image}\n              onBlur={formik.handleBlur}\n              {...formik.getFieldProps(\"image\")}\n              error={formik.touched.image && formik.errors.image}\n              helperText={formik.touched.image && formik.errors.image}\n            />\n            {/* {\n                matches\n                ?\n                <div className=\"App\" style={{  marginTop:20,width: matches ? \"80.5%\" : \"100%\" }}>\n            \n                <CKEditor\n                    id=\"content\"\n                    name = 'content'\n                    editor={ ClassicEditor }\n                    onChange={(event) => formik.handleChange(event)}\n                    value = {formik.values.content}\n                    onBlur={(event) => formik.handleBlur(event)}\n                    {...formik.getFieldProps('content')}\n                    error={formik.touched.content && formik.errors.content }\n                   type=\"classic\"\n                  //  data =  {formik.values.content}\n                   readOnly={false}\n                />\n            </div>\n                : */}\n            <CssTextField\n              className={classes.margin}\n              style={{ width: matches ? \"80.5%\" : \"100%\" }}\n              variant=\"outlined\"\n              multiline\n              rows={8}\n              id=\"content\"\n              name=\"content\"\n              label=\"Content\"\n              onChange={formik.handleChange}\n              value={formik.values.content}\n              onBlur={formik.handleBlur}\n              {...formik.getFieldProps(\"content\")}\n              error={formik.touched.content && formik.errors.content}\n              helperText={formik.touched.content && formik.errors.content}\n            />\n\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n              <InputLabel htmlFor=\"outlined-age-native-simple\">\n                Status\n              </InputLabel>\n              <Select\n                native\n                value={formik.values.status}\n                onChange={formik.handleChange}\n                label=\"Status\"\n                name=\"status\"\n                inputProps={{\n                  name: \"status\",\n                  id: \"outlined-age-native-simple\",\n                }}\n              >\n                <option aria-label=\"None\" value=\"\" />\n                <option value={\"d\"} label=\"draft\" />\n                <option value={\"p\"} label=\"published\" />\n              </Select>\n            </FormControl>\n            <Button\n              color=\"primary\"\n              style={{\n                width: matches ? \"80.7%\" : \"100%\",\n                marginTop: matches ? null : 30,\n              }}\n              variant=\"contained\"\n              fullWidth\n              type=\"submit\"\n              className={classes.button}\n            >\n              Update\n            </Button>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\nexport default UpdatePage;\n","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\App.js",[],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\context\\AuthContext.js",[],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\helper\\FetchData.js",[],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\Register.js",[],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\Login.js",["113"],"import React, {useContext , useState, useEffect} from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useHistory } from \"react-router-dom\";\nimport {AuthContext} from \"../context/AuthContext\"\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\n\n// FOOTER\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright ©️ \"}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\n// STYLE\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n// FUNCTION\n\nexport default function SignIn() {\n  let history = useHistory();\n  const classes = useStyles();\n  const {setCurrentUser, fetchDataLogin, currentUser} = useContext(AuthContext)\n  const [isLogged, setLogged]= useState(false)\n\n  const validationSchema = Yup.object().shape({\n    username: Yup.string()\n      .required(\"You must enter an username\")\n      .max(100, \"not invalid username\"),\n    password: Yup.string()\n      .required(\"No password provided.\")\n      .min(8, \"Password is too short - should be 8 chars minimum.\"),\n  });\n\n  const initialValues = {\n    username: \"\",\n    password: \"\",\n  };\n\n  const onSubmit = (values) =>{\n    const user=values.username\n    fetchDataLogin(\"https://blog-backend-ysf.herokuapp.com/auth/login/\", values)\n    .then((data) => {\n        \n        localStorage.setItem(\"currentUser\", values.username)\n        localStorage.setItem(\"isLoggedIn\", true)\n        localStorage.setItem(\"Token\", data.key)\n        setLogged(true)\n        console.log(isLogged)\n        if (isLogged){\n          setCurrentUser(user)\n          console.log(currentUser)\n          console.log(isLogged)\n        }\n        \n        history.push(\"/\");\n          \n        \n      })\n      .catch((err) => {\n        toast.error(\"Please check your username and password\");      \n      });\n    }\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit,\n  });\n\n  useEffect(() => {\n    \n  }, [currentUser, isLogged])\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <ToastContainer\n          position=\"top-right\"\n          autoClose={2000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          pauseOnHover\n        />\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form\n          className={classes.form}\n          noValidate\n          onSubmit={formik.handleSubmit}\n        >\n          // TODO: toast ile hata verdirilecek\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"username\"\n            label=\"Username\"\n            name=\"username\"\n            autoComplete=\"username\"\n            autoFocus\n            onChange={formik.handeChange}\n            value={formik.values.username}\n            onBlur={formik.handleBlur}\n            {...formik.getFieldProps(\"username\")}\n            error={formik.touched.username && formik.errors.username}\n            helperText={formik.touched.username && formik.errors.username}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            onChange={formik.handleChange}\n            value={formik.values.password}\n            onBlur={formik.handleBlur}\n            {...formik.getFieldProps(\"password\")}\n            error={formik.touched.password && formik.errors.password}\n            helperText={formik.touched.password && formik.errors.password}\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n        </form>\n        <Grid container>\n          <Grid item xs>\n            <Link href=\"#\" variant=\"body2\">\n              Forgot password?\n            </Link>\n          </Grid>\n          <Grid item>\n            <Link href=\"#\" variant=\"body2\">\n              {\"Don't have an account? Sign Up\"}\n            </Link>\n          </Grid>\n        </Grid>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n","C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\components\\MenuComponent.js",[],"C:\\Users\\tt\\Desktop\\GitHub\\React_Django_Project_Frontend\\src\\pages\\Pagination.js",["114"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function PostPagination() {\r\n  const classes = useStyles();\r\n  const list=[\"q\", \"w\",\"e\", \"e\",\"r\", \"t\", \"u\", \"ı\", \"o\", \"p\", \"q\", \"w\",\"e\", \"e\",\"r\", \"t\", \"u\", \"ı\", \"o\", \"p\"]\r\n  const [page, setPage] = React.useState(1);\r\n  const handleChange = (event, value) => {\r\n    setPage(value);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Pagination count={10} shape=\"rounded\" page={page} onChange={handleChange} />\r\n    </div>\r\n  );\r\n}",{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":16,"column":8,"nodeType":"121","messageId":"122","endLine":16,"endColumn":13},{"ruleId":"123","severity":1,"message":"124","line":24,"column":5,"nodeType":"125","messageId":"126","endLine":24,"endColumn":15},{"ruleId":"119","severity":1,"message":"127","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":13},{"ruleId":"119","severity":1,"message":"128","line":21,"column":7,"nodeType":"121","messageId":"122","endLine":21,"endColumn":14},{"ruleId":"119","severity":1,"message":"129","line":1,"column":28,"nodeType":"121","messageId":"122","endLine":1,"endColumn":36},{"ruleId":"119","severity":1,"message":"130","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":13},{"ruleId":"119","severity":1,"message":"131","line":9,"column":20,"nodeType":"121","messageId":"122","endLine":9,"endColumn":31},{"ruleId":"132","severity":1,"message":"133","line":25,"column":6,"nodeType":"134","endLine":25,"endColumn":8,"suggestions":"135"},{"ruleId":"115","replacedBy":"136"},{"ruleId":"117","replacedBy":"137"},{"ruleId":"119","severity":1,"message":"138","line":1,"column":30,"nodeType":"121","messageId":"122","endLine":1,"endColumn":39},{"ruleId":"123","severity":1,"message":"124","line":26,"column":5,"nodeType":"125","messageId":"126","endLine":26,"endColumn":15},{"ruleId":"119","severity":1,"message":"139","line":87,"column":10,"nodeType":"121","messageId":"122","endLine":87,"endColumn":15},{"ruleId":"119","severity":1,"message":"140","line":88,"column":10,"nodeType":"121","messageId":"122","endLine":88,"endColumn":21},{"ruleId":"132","severity":1,"message":"141","line":154,"column":6,"nodeType":"134","endLine":154,"endColumn":8,"suggestions":"142"},{"ruleId":"119","severity":1,"message":"143","line":16,"column":8,"nodeType":"121","messageId":"122","endLine":16,"endColumn":16},{"ruleId":"132","severity":1,"message":"141","line":143,"column":6,"nodeType":"134","endLine":143,"endColumn":8,"suggestions":"144"},{"ruleId":"119","severity":1,"message":"145","line":162,"column":11,"nodeType":"121","messageId":"122","endLine":162,"endColumn":19},{"ruleId":"146","severity":1,"message":"147","line":137,"column":10,"nodeType":"148","endLine":139,"endColumn":11},{"ruleId":"119","severity":1,"message":"149","line":15,"column":9,"nodeType":"121","messageId":"122","endLine":15,"endColumn":13},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'logo2' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'marginLeft'.","ObjectExpression","unexpected","'Paper' is defined but never used.","'classes' is assigned a value but never used.","'useState' is defined but never used.","'axios' is defined but never used.","'setPostList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchDataList'. Either include it or remove the dependency array.","ArrayExpression",["152"],["150"],["151"],"'useEffect' is defined but never used.","'login' is assigned a value but never used.","'currentUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["153"],"'CKEditor' is defined but never used.",["154"],"'response' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","'list' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"157","fix":"159"},"Update the dependencies array to be: [fetchDataList]",{"range":"160","text":"161"},"Update the dependencies array to be: [fetchData]",{"range":"162","text":"163"},{"range":"164","text":"163"},[734,736],"[fetchDataList]",[3852,3854],"[fetchData]",[3395,3397]]